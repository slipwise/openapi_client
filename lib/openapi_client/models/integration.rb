=begin
#Sync for Commerce

#The API for Sync for Commerce.   Sync for Commerce automatically replicates and reconciles sales data from a merchantâ€™s source PoS, Payments, and eCommerce systems into their accounting software. This eliminates manual processing by merchants and transforms their ability to run and grow their business.    [Read More...](https://docs.codat.io/commerce/overview)  Not seeing the endpoints you're expecting? We've [reorganized our products](https://docs.codat.io/updates/230901-new-products), and you may be using a [different version of Sync for Commerce](https://docs.codat.io/sync-for-commerce-v1-api#/).

The version of the OpenAPI document: 1.1
Contact: syncforcommerce@codat.io
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.4.0-SNAPSHOT

=end

require 'date'
require 'time'

module OpenapiClient
  # An integration that Codat supports
  class Integration
    # A unique 4-letter key to represent a platform in each integration. View [accounting](https://docs.codat.io/integrations/accounting/overview#platform-keys), [banking](https://docs.codat.io/integrations/banking/overview#platform-keys), and [commerce](https://docs.codat.io/integrations/commerce/overview#platform-keys) platform keys.
    attr_accessor :key

    # Static url for integration's logo.
    attr_accessor :logo_url

    # Name of integration.
    attr_accessor :name

    # Whether this integration is enabled for your customers to use.
    attr_accessor :enabled

    # A source-specific ID used to distinguish between different sources originating from the same data connection. In general, a data connection is a single data source. However, for TrueLayer, `sourceId` is associated with a specific bank and has a many-to-one relationship with the `integrationId`.
    attr_accessor :source_id

    attr_accessor :source_type

    # A Codat ID representing the integration.
    attr_accessor :integration_id

    # `True` if the integration is to an application installed and run locally on an SMBs computer.
    attr_accessor :is_offline_connector

    # `True` if the integration is currently in beta release.
    attr_accessor :is_beta

    # The name of the data provider.
    attr_accessor :data_provided_by

    attr_accessor :datatype_features

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'key' => :'key',
        :'logo_url' => :'logoUrl',
        :'name' => :'name',
        :'enabled' => :'enabled',
        :'source_id' => :'sourceId',
        :'source_type' => :'sourceType',
        :'integration_id' => :'integrationId',
        :'is_offline_connector' => :'isOfflineConnector',
        :'is_beta' => :'isBeta',
        :'data_provided_by' => :'dataProvidedBy',
        :'datatype_features' => :'datatypeFeatures'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'key' => :'String',
        :'logo_url' => :'String',
        :'name' => :'String',
        :'enabled' => :'Boolean',
        :'source_id' => :'String',
        :'source_type' => :'SourceType',
        :'integration_id' => :'String',
        :'is_offline_connector' => :'Boolean',
        :'is_beta' => :'Boolean',
        :'data_provided_by' => :'String',
        :'datatype_features' => :'Array<DataTypeFeature>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::Integration` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::Integration`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'key')
        self.key = attributes[:'key']
      else
        self.key = nil
      end

      if attributes.key?(:'logo_url')
        self.logo_url = attributes[:'logo_url']
      else
        self.logo_url = nil
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      else
        self.name = nil
      end

      if attributes.key?(:'enabled')
        self.enabled = attributes[:'enabled']
      else
        self.enabled = nil
      end

      if attributes.key?(:'source_id')
        self.source_id = attributes[:'source_id']
      end

      if attributes.key?(:'source_type')
        self.source_type = attributes[:'source_type']
      end

      if attributes.key?(:'integration_id')
        self.integration_id = attributes[:'integration_id']
      end

      if attributes.key?(:'is_offline_connector')
        self.is_offline_connector = attributes[:'is_offline_connector']
      end

      if attributes.key?(:'is_beta')
        self.is_beta = attributes[:'is_beta']
      end

      if attributes.key?(:'data_provided_by')
        self.data_provided_by = attributes[:'data_provided_by']
      end

      if attributes.key?(:'datatype_features')
        if (value = attributes[:'datatype_features']).is_a?(Array)
          self.datatype_features = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @key.nil?
        invalid_properties.push('invalid value for "key", key cannot be nil.')
      end

      if @key.to_s.length > 4
        invalid_properties.push('invalid value for "key", the character length must be smaller than or equal to 4.')
      end

      if @key.to_s.length < 4
        invalid_properties.push('invalid value for "key", the character length must be great than or equal to 4.')
      end

      pattern = Regexp.new(/[a-z]{4}/)
      if @key !~ pattern
        invalid_properties.push("invalid value for \"key\", must conform to the pattern #{pattern}.")
      end

      if @logo_url.nil?
        invalid_properties.push('invalid value for "logo_url", logo_url cannot be nil.')
      end

      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      if @enabled.nil?
        invalid_properties.push('invalid value for "enabled", enabled cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @key.nil?
      return false if @key.to_s.length > 4
      return false if @key.to_s.length < 4
      return false if @key !~ Regexp.new(/[a-z]{4}/)
      return false if @logo_url.nil?
      return false if @name.nil?
      return false if @enabled.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] key Value to be assigned
    def key=(key)
      if key.nil?
        fail ArgumentError, 'key cannot be nil'
      end

      if key.to_s.length > 4
        fail ArgumentError, 'invalid value for "key", the character length must be smaller than or equal to 4.'
      end

      if key.to_s.length < 4
        fail ArgumentError, 'invalid value for "key", the character length must be great than or equal to 4.'
      end

      pattern = Regexp.new(/[a-z]{4}/)
      if key !~ pattern
        fail ArgumentError, "invalid value for \"key\", must conform to the pattern #{pattern}."
      end

      @key = key
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          key == o.key &&
          logo_url == o.logo_url &&
          name == o.name &&
          enabled == o.enabled &&
          source_id == o.source_id &&
          source_type == o.source_type &&
          integration_id == o.integration_id &&
          is_offline_connector == o.is_offline_connector &&
          is_beta == o.is_beta &&
          data_provided_by == o.data_provided_by &&
          datatype_features == o.datatype_features
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [key, logo_url, name, enabled, source_id, source_type, integration_id, is_offline_connector, is_beta, data_provided_by, datatype_features].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
