=begin
#Platform API

#An API for the common components of all of Codat's products.  These end points cover creating and managing your companies, data connections, and integrations.  [Read about the building blocks of Codat...](https://docs.codat.io/core-concepts/companies)  [See our OpenAPI spec](https://github.com/codatio/oas) 

The version of the OpenAPI document: 3.0.0
Contact: support@codat.io
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.4.0-SNAPSHOT

=end

require 'date'
require 'time'

module OpenapiClient
  # Describes how often, and how much history, should be fetched for the given data type when a pull operation is queued.
  class SyncSetting
    attr_accessor :data_type

    # Whether this data type should be queued after a company has authorized a connection.
    attr_accessor :fetch_on_first_link

    # Number of hours after which this data type should be refreshed.
    attr_accessor :sync_schedule

    # The sync in which data types are queued for a sync.
    attr_accessor :sync_order

    # In Codat's data model, dates and times are represented using the <a class=\"external\" href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:  ``` 2020-10-08T22:40:50Z 2021-01-01T00:00:00 ```    When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:  - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z` - Unqualified local time: `2021-11-15T01:00:00` - UTC time offsets: `2021-11-15T01:00:00-05:00`  > Time zones >  > Not all dates from Codat will contain information about time zones.   > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
    attr_accessor :sync_from_utc

    # Number of months of data to be fetched. Set this *or* `syncFromUTC`.
    attr_accessor :sync_from_window

    # Months of data to fetch, for report data types (`balanceSheet` & `profitAndLoss`) only.
    attr_accessor :months_to_sync

    # `True` if the [sync setting](https://docs.codat.io/knowledge-base/advanced-sync-settings) is locked.
    attr_accessor :is_locked

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'data_type' => :'dataType',
        :'fetch_on_first_link' => :'fetchOnFirstLink',
        :'sync_schedule' => :'syncSchedule',
        :'sync_order' => :'syncOrder',
        :'sync_from_utc' => :'syncFromUtc',
        :'sync_from_window' => :'syncFromWindow',
        :'months_to_sync' => :'monthsToSync',
        :'is_locked' => :'isLocked'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'data_type' => :'DataType',
        :'fetch_on_first_link' => :'Boolean',
        :'sync_schedule' => :'Integer',
        :'sync_order' => :'Integer',
        :'sync_from_utc' => :'String',
        :'sync_from_window' => :'Integer',
        :'months_to_sync' => :'Integer',
        :'is_locked' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::SyncSetting` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::SyncSetting`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'data_type')
        self.data_type = attributes[:'data_type']
      else
        self.data_type = nil
      end

      if attributes.key?(:'fetch_on_first_link')
        self.fetch_on_first_link = attributes[:'fetch_on_first_link']
      else
        self.fetch_on_first_link = nil
      end

      if attributes.key?(:'sync_schedule')
        self.sync_schedule = attributes[:'sync_schedule']
      else
        self.sync_schedule = nil
      end

      if attributes.key?(:'sync_order')
        self.sync_order = attributes[:'sync_order']
      else
        self.sync_order = nil
      end

      if attributes.key?(:'sync_from_utc')
        self.sync_from_utc = attributes[:'sync_from_utc']
      end

      if attributes.key?(:'sync_from_window')
        self.sync_from_window = attributes[:'sync_from_window']
      end

      if attributes.key?(:'months_to_sync')
        self.months_to_sync = attributes[:'months_to_sync']
      end

      if attributes.key?(:'is_locked')
        self.is_locked = attributes[:'is_locked']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @data_type.nil?
        invalid_properties.push('invalid value for "data_type", data_type cannot be nil.')
      end

      if @fetch_on_first_link.nil?
        invalid_properties.push('invalid value for "fetch_on_first_link", fetch_on_first_link cannot be nil.')
      end

      if @sync_schedule.nil?
        invalid_properties.push('invalid value for "sync_schedule", sync_schedule cannot be nil.')
      end

      if @sync_order.nil?
        invalid_properties.push('invalid value for "sync_order", sync_order cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @data_type.nil?
      return false if @fetch_on_first_link.nil?
      return false if @sync_schedule.nil?
      return false if @sync_order.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          data_type == o.data_type &&
          fetch_on_first_link == o.fetch_on_first_link &&
          sync_schedule == o.sync_schedule &&
          sync_order == o.sync_order &&
          sync_from_utc == o.sync_from_utc &&
          sync_from_window == o.sync_from_window &&
          months_to_sync == o.months_to_sync &&
          is_locked == o.is_locked
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [data_type, fetch_on_first_link, sync_schedule, sync_order, sync_from_utc, sync_from_window, months_to_sync, is_locked].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
