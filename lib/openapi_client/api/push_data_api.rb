=begin
#Platform API

#An API for the common components of all of Codat's products.  These end points cover creating and managing your companies, data connections, and integrations.  [Read about the building blocks of Codat...](https://docs.codat.io/core-concepts/companies)  [See our OpenAPI spec](https://github.com/codatio/oas) 

The version of the OpenAPI document: 3.0.0
Contact: support@codat.io
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.4.0-SNAPSHOT

=end

require 'cgi'

module OpenapiClient
  class PushDataApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # List push operations
    # List push operation records.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number. [Read more](https://docs.codat.io/using-the-api/paging). (default to 1)
    # @option opts [Integer] :page_size Number of records to return in a page. [Read more](https://docs.codat.io/using-the-api/paging). (default to 100)
    # @option opts [String] :query Codat query string. [Read more](https://docs.codat.io/using-the-api/querying).
    # @option opts [String] :order_by Field to order results by. [Read more](https://docs.codat.io/using-the-api/ordering-results).
    # @return [PushOperations]
    def get_company_push_history(opts = {})
      data, _status_code, _headers = get_company_push_history_with_http_info(opts)
      data
    end

    # List push operations
    # List push operation records.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number. [Read more](https://docs.codat.io/using-the-api/paging). (default to 1)
    # @option opts [Integer] :page_size Number of records to return in a page. [Read more](https://docs.codat.io/using-the-api/paging). (default to 100)
    # @option opts [String] :query Codat query string. [Read more](https://docs.codat.io/using-the-api/querying).
    # @option opts [String] :order_by Field to order results by. [Read more](https://docs.codat.io/using-the-api/ordering-results).
    # @return [Array<(PushOperations, Integer, Hash)>] PushOperations data, response status code and response headers
    def get_company_push_history_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PushDataApi.get_company_push_history ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling PushDataApi.get_company_push_history, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 5000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PushDataApi.get_company_push_history, must be smaller than or equal to 5000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling PushDataApi.get_company_push_history, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/companies/{companyId}/push'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'orderBy'] = opts[:'order_by'] if !opts[:'order_by'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PushOperations'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['auth_header']

      new_options = opts.merge(
        :operation => :"PushDataApi.get_company_push_history",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PushDataApi#get_company_push_history\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get push options
    # This is the generic documentation for creation and updating of data. See the equivalent endpoint for a given data type for more specific information.   Before pushing data into accounting software, it is often necessary to collect some details from the user as to how they would like the data to be inserted. This includes names and amounts on transactional entities, but also factors such as categorisation of entities, which is often handled differently between different accounting packages. A good example of this is specifying where on the balance sheet/profit and loss reports the user would like a newly-created nominal account to appear.  Codat tries not to limit users to pushing to a very limited number of standard categories, so we have implemented \"options\" endpoints, which allow us to expose to our clients the fields which are required to be pushed for a specific linked company, and the options which may be selected for each field.   > **Supported Integrations** >  > Check out our [coverage explorer](https://knowledge.codat.io/) for integrations that support push (POST/PUT methods).
    # @param company_id [String] Unique identifier for a company.
    # @param connection_id [String] Unique identifier for a connection.
    # @param data_type [DataType] The key of a Codat data type
    # @param [Hash] opts the optional parameters
    # @return [PushOption]
    def get_create_update_model_options_by_data_type(company_id, connection_id, data_type, opts = {})
      data, _status_code, _headers = get_create_update_model_options_by_data_type_with_http_info(company_id, connection_id, data_type, opts)
      data
    end

    # Get push options
    # This is the generic documentation for creation and updating of data. See the equivalent endpoint for a given data type for more specific information.   Before pushing data into accounting software, it is often necessary to collect some details from the user as to how they would like the data to be inserted. This includes names and amounts on transactional entities, but also factors such as categorisation of entities, which is often handled differently between different accounting packages. A good example of this is specifying where on the balance sheet/profit and loss reports the user would like a newly-created nominal account to appear.  Codat tries not to limit users to pushing to a very limited number of standard categories, so we have implemented \&quot;options\&quot; endpoints, which allow us to expose to our clients the fields which are required to be pushed for a specific linked company, and the options which may be selected for each field.   &gt; **Supported Integrations** &gt;  &gt; Check out our [coverage explorer](https://knowledge.codat.io/) for integrations that support push (POST/PUT methods).
    # @param company_id [String] Unique identifier for a company.
    # @param connection_id [String] Unique identifier for a connection.
    # @param data_type [DataType] The key of a Codat data type
    # @param [Hash] opts the optional parameters
    # @return [Array<(PushOption, Integer, Hash)>] PushOption data, response status code and response headers
    def get_create_update_model_options_by_data_type_with_http_info(company_id, connection_id, data_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PushDataApi.get_create_update_model_options_by_data_type ...'
      end
      # verify the required parameter 'company_id' is set
      if @api_client.config.client_side_validation && company_id.nil?
        fail ArgumentError, "Missing the required parameter 'company_id' when calling PushDataApi.get_create_update_model_options_by_data_type"
      end
      # verify the required parameter 'connection_id' is set
      if @api_client.config.client_side_validation && connection_id.nil?
        fail ArgumentError, "Missing the required parameter 'connection_id' when calling PushDataApi.get_create_update_model_options_by_data_type"
      end
      # verify the required parameter 'data_type' is set
      if @api_client.config.client_side_validation && data_type.nil?
        fail ArgumentError, "Missing the required parameter 'data_type' when calling PushDataApi.get_create_update_model_options_by_data_type"
      end
      # resource path
      local_var_path = '/companies/{companyId}/connections/{connectionId}/options/{dataType}'.sub('{' + 'companyId' + '}', CGI.escape(company_id.to_s)).sub('{' + 'connectionId' + '}', CGI.escape(connection_id.to_s)).sub('{' + 'dataType' + '}', CGI.escape(data_type.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PushOption'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['auth_header']

      new_options = opts.merge(
        :operation => :"PushDataApi.get_create_update_model_options_by_data_type",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PushDataApi#get_create_update_model_options_by_data_type\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get push operation
    # Retrieve push operation.
    # @param company_id [String] Unique identifier for a company.
    # @param push_operation_key [String] Push operation key.
    # @param [Hash] opts the optional parameters
    # @return [PushOperation]
    def get_push_operation(company_id, push_operation_key, opts = {})
      data, _status_code, _headers = get_push_operation_with_http_info(company_id, push_operation_key, opts)
      data
    end

    # Get push operation
    # Retrieve push operation.
    # @param company_id [String] Unique identifier for a company.
    # @param push_operation_key [String] Push operation key.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PushOperation, Integer, Hash)>] PushOperation data, response status code and response headers
    def get_push_operation_with_http_info(company_id, push_operation_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PushDataApi.get_push_operation ...'
      end
      # verify the required parameter 'company_id' is set
      if @api_client.config.client_side_validation && company_id.nil?
        fail ArgumentError, "Missing the required parameter 'company_id' when calling PushDataApi.get_push_operation"
      end
      # verify the required parameter 'push_operation_key' is set
      if @api_client.config.client_side_validation && push_operation_key.nil?
        fail ArgumentError, "Missing the required parameter 'push_operation_key' when calling PushDataApi.get_push_operation"
      end
      # resource path
      local_var_path = '/companies/{companyId}/push/{pushOperationKey}'.sub('{' + 'companyId' + '}', CGI.escape(company_id.to_s)).sub('{' + 'pushOperationKey' + '}', CGI.escape(push_operation_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PushOperation'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['auth_header']

      new_options = opts.merge(
        :operation => :"PushDataApi.get_push_operation",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PushDataApi#get_push_operation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
