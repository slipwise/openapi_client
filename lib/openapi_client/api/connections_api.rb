=begin
#Sync for Commerce

#The API for Sync for Commerce.   Sync for Commerce automatically replicates and reconciles sales data from a merchant’s source PoS, Payments, and eCommerce systems into their accounting software. This eliminates manual processing by merchants and transforms their ability to run and grow their business.    [Read More...](https://docs.codat.io/commerce/overview)  Not seeing the endpoints you're expecting? We've [reorganized our products](https://docs.codat.io/updates/230901-new-products), and you may be using a [different version of Sync for Commerce](https://docs.codat.io/sync-for-commerce-v1-api#/).

The version of the OpenAPI document: 1.1
Contact: syncforcommerce@codat.io
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.4.0-SNAPSHOT

=end

require 'cgi'

module OpenapiClient
  class ConnectionsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create connection
    # ﻿Creates a connection for the company by providing a valid `platformKey`.   Use the [List Integrations](https://docs.codat.io/sync-for-sync-for-commerce-api#/operations/list-integrations) endpoint to access valid platform keys. 
    # @param company_id [String] Unique identifier for a company.
    # @param [Hash] opts the optional parameters
    # @option opts [CreateConnectionRequest] :create_connection_request 
    # @return [Connection]
    def create_connection(company_id, opts = {})
      data, _status_code, _headers = create_connection_with_http_info(company_id, opts)
      data
    end

    # Create connection
    # ﻿Creates a connection for the company by providing a valid &#x60;platformKey&#x60;.   Use the [List Integrations](https://docs.codat.io/sync-for-sync-for-commerce-api#/operations/list-integrations) endpoint to access valid platform keys. 
    # @param company_id [String] Unique identifier for a company.
    # @param [Hash] opts the optional parameters
    # @option opts [CreateConnectionRequest] :create_connection_request 
    # @return [Array<(Connection, Integer, Hash)>] Connection data, response status code and response headers
    def create_connection_with_http_info(company_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConnectionsApi.create_connection ...'
      end
      # verify the required parameter 'company_id' is set
      if @api_client.config.client_side_validation && company_id.nil?
        fail ArgumentError, "Missing the required parameter 'company_id' when calling ConnectionsApi.create_connection"
      end
      # resource path
      local_var_path = '/companies/{companyId}/connections'.sub('{' + 'companyId' + '}', CGI.escape(company_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_connection_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'Connection'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['auth_header']

      new_options = opts.merge(
        :operation => :"ConnectionsApi.create_connection",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConnectionsApi#create_connection\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Start new sync flow
    # Create a new company and connections. Get a URL for Sync Flow, including a one time passcode.
    # @param commerce_key [String] Commerce platform key
    # @param accounting_key [String] Accounting platform key
    # @param [Hash] opts the optional parameters
    # @option opts [String] :merchant_identifier Identifier for your merchant, can be the merchant name or Codat company id.
    # @return [SyncFlowUrl]
    def get_sync_flow_url(commerce_key, accounting_key, opts = {})
      data, _status_code, _headers = get_sync_flow_url_with_http_info(commerce_key, accounting_key, opts)
      data
    end

    # Start new sync flow
    # Create a new company and connections. Get a URL for Sync Flow, including a one time passcode.
    # @param commerce_key [String] Commerce platform key
    # @param accounting_key [String] Accounting platform key
    # @param [Hash] opts the optional parameters
    # @option opts [String] :merchant_identifier Identifier for your merchant, can be the merchant name or Codat company id.
    # @return [Array<(SyncFlowUrl, Integer, Hash)>] SyncFlowUrl data, response status code and response headers
    def get_sync_flow_url_with_http_info(commerce_key, accounting_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConnectionsApi.get_sync_flow_url ...'
      end
      # verify the required parameter 'commerce_key' is set
      if @api_client.config.client_side_validation && commerce_key.nil?
        fail ArgumentError, "Missing the required parameter 'commerce_key' when calling ConnectionsApi.get_sync_flow_url"
      end
      # verify the required parameter 'accounting_key' is set
      if @api_client.config.client_side_validation && accounting_key.nil?
        fail ArgumentError, "Missing the required parameter 'accounting_key' when calling ConnectionsApi.get_sync_flow_url"
      end
      # resource path
      local_var_path = '/config/sync/commerce/{commerceKey}/{accountingKey}/start'.sub('{' + 'commerceKey' + '}', CGI.escape(commerce_key.to_s)).sub('{' + 'accountingKey' + '}', CGI.escape(accounting_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'merchantIdentifier'] = opts[:'merchant_identifier'] if !opts[:'merchant_identifier'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SyncFlowUrl'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['auth_header']

      new_options = opts.merge(
        :operation => :"ConnectionsApi.get_sync_flow_url",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConnectionsApi#get_sync_flow_url\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List connections
    # ﻿List the connections for a company.
    # @param company_id [String] Unique identifier for a company.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number. [Read more](https://docs.codat.io/using-the-api/paging). (default to 1)
    # @option opts [Integer] :page_size Number of records to return in a page. [Read more](https://docs.codat.io/using-the-api/paging). (default to 100)
    # @option opts [String] :query Codat query string. [Read more](https://docs.codat.io/using-the-api/querying).
    # @option opts [String] :order_by Field to order results by. [Read more](https://docs.codat.io/using-the-api/ordering-results).
    # @return [Connections]
    def list_connections(company_id, opts = {})
      data, _status_code, _headers = list_connections_with_http_info(company_id, opts)
      data
    end

    # List connections
    # ﻿List the connections for a company.
    # @param company_id [String] Unique identifier for a company.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number. [Read more](https://docs.codat.io/using-the-api/paging). (default to 1)
    # @option opts [Integer] :page_size Number of records to return in a page. [Read more](https://docs.codat.io/using-the-api/paging). (default to 100)
    # @option opts [String] :query Codat query string. [Read more](https://docs.codat.io/using-the-api/querying).
    # @option opts [String] :order_by Field to order results by. [Read more](https://docs.codat.io/using-the-api/ordering-results).
    # @return [Array<(Connections, Integer, Hash)>] Connections data, response status code and response headers
    def list_connections_with_http_info(company_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConnectionsApi.list_connections ...'
      end
      # verify the required parameter 'company_id' is set
      if @api_client.config.client_side_validation && company_id.nil?
        fail ArgumentError, "Missing the required parameter 'company_id' when calling ConnectionsApi.list_connections"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling ConnectionsApi.list_connections, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 5000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ConnectionsApi.list_connections, must be smaller than or equal to 5000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling ConnectionsApi.list_connections, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/companies/{companyId}/connections'.sub('{' + 'companyId' + '}', CGI.escape(company_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'orderBy'] = opts[:'order_by'] if !opts[:'order_by'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Connections'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['auth_header']

      new_options = opts.merge(
        :operation => :"ConnectionsApi.list_connections",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConnectionsApi#list_connections\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update connection
    # Update a data connection
    # @param company_id [String] Unique identifier for a company.
    # @param connection_id [String] Unique identifier for a connection.
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateConnection] :update_connection 
    # @return [Connection]
    def update_connection(company_id, connection_id, opts = {})
      data, _status_code, _headers = update_connection_with_http_info(company_id, connection_id, opts)
      data
    end

    # Update connection
    # Update a data connection
    # @param company_id [String] Unique identifier for a company.
    # @param connection_id [String] Unique identifier for a connection.
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateConnection] :update_connection 
    # @return [Array<(Connection, Integer, Hash)>] Connection data, response status code and response headers
    def update_connection_with_http_info(company_id, connection_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConnectionsApi.update_connection ...'
      end
      # verify the required parameter 'company_id' is set
      if @api_client.config.client_side_validation && company_id.nil?
        fail ArgumentError, "Missing the required parameter 'company_id' when calling ConnectionsApi.update_connection"
      end
      # verify the required parameter 'connection_id' is set
      if @api_client.config.client_side_validation && connection_id.nil?
        fail ArgumentError, "Missing the required parameter 'connection_id' when calling ConnectionsApi.update_connection"
      end
      # resource path
      local_var_path = '/companies/{companyId}/connections/{connectionId}'.sub('{' + 'companyId' + '}', CGI.escape(company_id.to_s)).sub('{' + 'connectionId' + '}', CGI.escape(connection_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'update_connection'])

      # return_type
      return_type = opts[:debug_return_type] || 'Connection'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['auth_header']

      new_options = opts.merge(
        :operation => :"ConnectionsApi.update_connection",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConnectionsApi#update_connection\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update authorization
    # Update data connection's authorization.
    # @param company_id [String] Unique identifier for a company.
    # @param connection_id [String] Unique identifier for a connection.
    # @param [Hash] opts the optional parameters
    # @option opts [Hash<String, String>] :request_body 
    # @return [Connection]
    def update_connection_authorization(company_id, connection_id, opts = {})
      data, _status_code, _headers = update_connection_authorization_with_http_info(company_id, connection_id, opts)
      data
    end

    # Update authorization
    # Update data connection&#39;s authorization.
    # @param company_id [String] Unique identifier for a company.
    # @param connection_id [String] Unique identifier for a connection.
    # @param [Hash] opts the optional parameters
    # @option opts [Hash<String, String>] :request_body 
    # @return [Array<(Connection, Integer, Hash)>] Connection data, response status code and response headers
    def update_connection_authorization_with_http_info(company_id, connection_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConnectionsApi.update_connection_authorization ...'
      end
      # verify the required parameter 'company_id' is set
      if @api_client.config.client_side_validation && company_id.nil?
        fail ArgumentError, "Missing the required parameter 'company_id' when calling ConnectionsApi.update_connection_authorization"
      end
      # verify the required parameter 'connection_id' is set
      if @api_client.config.client_side_validation && connection_id.nil?
        fail ArgumentError, "Missing the required parameter 'connection_id' when calling ConnectionsApi.update_connection_authorization"
      end
      # resource path
      local_var_path = '/companies/{companyId}/connections/{connectionId}/authorization'.sub('{' + 'companyId' + '}', CGI.escape(company_id.to_s)).sub('{' + 'connectionId' + '}', CGI.escape(connection_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'request_body'])

      # return_type
      return_type = opts[:debug_return_type] || 'Connection'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['auth_header']

      new_options = opts.merge(
        :operation => :"ConnectionsApi.update_connection_authorization",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConnectionsApi#update_connection_authorization\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
