=begin
#Sync for Commerce

#The API for Sync for Commerce.   Sync for Commerce automatically replicates and reconciles sales data from a merchantâ€™s source PoS, Payments, and eCommerce systems into their accounting software. This eliminates manual processing by merchants and transforms their ability to run and grow their business.    [Read More...](https://docs.codat.io/commerce/overview)  Not seeing the endpoints you're expecting? We've [reorganized our products](https://docs.codat.io/updates/230901-new-products), and you may be using a [different version of Sync for Commerce](https://docs.codat.io/sync-for-commerce-v1-api#/).

The version of the OpenAPI document: 1.1
Contact: syncforcommerce@codat.io
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.4.0-SNAPSHOT

=end

require 'cgi'

module OpenapiClient
  class IntegrationsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get branding for an integration
    # Retrieve Integration branding assets.
    # @param platform_key [String] A unique 4-letter key to represent a platform in each integration. View [accounting](https://docs.codat.io/integrations/accounting/overview#platform-keys), [banking](https://docs.codat.io/integrations/banking/overview#platform-keys), and [commerce](https://docs.codat.io/integrations/commerce/overview#platform-keys) platform keys.
    # @param platform_key2 [String] Unique four letter identifier for the platform
    # @param [Hash] opts the optional parameters
    # @return [Branding]
    def get_integration_branding(platform_key, platform_key2, opts = {})
      data, _status_code, _headers = get_integration_branding_with_http_info(platform_key, platform_key2, opts)
      data
    end

    # Get branding for an integration
    # Retrieve Integration branding assets.
    # @param platform_key [String] A unique 4-letter key to represent a platform in each integration. View [accounting](https://docs.codat.io/integrations/accounting/overview#platform-keys), [banking](https://docs.codat.io/integrations/banking/overview#platform-keys), and [commerce](https://docs.codat.io/integrations/commerce/overview#platform-keys) platform keys.
    # @param platform_key2 [String] Unique four letter identifier for the platform
    # @param [Hash] opts the optional parameters
    # @return [Array<(Branding, Integer, Hash)>] Branding data, response status code and response headers
    def get_integration_branding_with_http_info(platform_key, platform_key2, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IntegrationsApi.get_integration_branding ...'
      end
      # verify the required parameter 'platform_key' is set
      if @api_client.config.client_side_validation && platform_key.nil?
        fail ArgumentError, "Missing the required parameter 'platform_key' when calling IntegrationsApi.get_integration_branding"
      end
      if @api_client.config.client_side_validation && platform_key.to_s.length > 4
        fail ArgumentError, 'invalid value for "platform_key" when calling IntegrationsApi.get_integration_branding, the character length must be smaller than or equal to 4.'
      end

      if @api_client.config.client_side_validation && platform_key.to_s.length < 4
        fail ArgumentError, 'invalid value for "platform_key" when calling IntegrationsApi.get_integration_branding, the character length must be great than or equal to 4.'
      end

      pattern = Regexp.new(/[a-z]{4}/)
      if @api_client.config.client_side_validation && platform_key !~ pattern
        fail ArgumentError, "invalid value for 'platform_key' when calling IntegrationsApi.get_integration_branding, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'platform_key2' is set
      if @api_client.config.client_side_validation && platform_key2.nil?
        fail ArgumentError, "Missing the required parameter 'platform_key2' when calling IntegrationsApi.get_integration_branding"
      end
      # resource path
      local_var_path = '/config/integrations/{platformKey}/branding'.sub('{' + 'platformKey' + '}', CGI.escape(platform_key.to_s)).sub('{' + 'platformKey' + '}', CGI.escape(platform_key2.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Branding'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['auth_header']

      new_options = opts.merge(
        :operation => :"IntegrationsApi.get_integration_branding",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IntegrationsApi#get_integration_branding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List integrations
    # Retrieve a list of available integrations support by data type and state of release.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number. [Read more](https://docs.codat.io/using-the-api/paging). (default to 1)
    # @option opts [Integer] :page_size Number of records to return in a page. [Read more](https://docs.codat.io/using-the-api/paging). (default to 100)
    # @option opts [String] :query Codat query string. [Read more](https://docs.codat.io/using-the-api/querying).
    # @option opts [String] :order_by Field to order results by. [Read more](https://docs.codat.io/using-the-api/ordering-results).
    # @return [Integrations]
    def list_integrations(opts = {})
      data, _status_code, _headers = list_integrations_with_http_info(opts)
      data
    end

    # List integrations
    # Retrieve a list of available integrations support by data type and state of release.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number. [Read more](https://docs.codat.io/using-the-api/paging). (default to 1)
    # @option opts [Integer] :page_size Number of records to return in a page. [Read more](https://docs.codat.io/using-the-api/paging). (default to 100)
    # @option opts [String] :query Codat query string. [Read more](https://docs.codat.io/using-the-api/querying).
    # @option opts [String] :order_by Field to order results by. [Read more](https://docs.codat.io/using-the-api/ordering-results).
    # @return [Array<(Integrations, Integer, Hash)>] Integrations data, response status code and response headers
    def list_integrations_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IntegrationsApi.list_integrations ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling IntegrationsApi.list_integrations, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 5000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IntegrationsApi.list_integrations, must be smaller than or equal to 5000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling IntegrationsApi.list_integrations, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/config/integrations'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'orderBy'] = opts[:'order_by'] if !opts[:'order_by'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Integrations'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['auth_header']

      new_options = opts.merge(
        :operation => :"IntegrationsApi.list_integrations",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IntegrationsApi#list_integrations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
