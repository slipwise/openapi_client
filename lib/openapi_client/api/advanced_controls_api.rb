=begin
#Sync for Commerce

#The API for Sync for Commerce.   Sync for Commerce automatically replicates and reconciles sales data from a merchantâ€™s source PoS, Payments, and eCommerce systems into their accounting software. This eliminates manual processing by merchants and transforms their ability to run and grow their business.    [Read More...](https://docs.codat.io/commerce/overview)  Not seeing the endpoints you're expecting? We've [reorganized our products](https://docs.codat.io/updates/230901-new-products), and you may be using a [different version of Sync for Commerce](https://docs.codat.io/sync-for-commerce-v1-api#/).

The version of the OpenAPI document: 1.1
Contact: syncforcommerce@codat.io
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.4.0-SNAPSHOT

=end

require 'cgi'

module OpenapiClient
  class AdvancedControlsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create company
    # Creates a Codat company
    # @param [Hash] opts the optional parameters
    # @option opts [CreateCompany] :create_company 
    # @return [Company]
    def create_company(opts = {})
      data, _status_code, _headers = create_company_with_http_info(opts)
      data
    end

    # Create company
    # Creates a Codat company
    # @param [Hash] opts the optional parameters
    # @option opts [CreateCompany] :create_company 
    # @return [Array<(Company, Integer, Hash)>] Company data, response status code and response headers
    def create_company_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvancedControlsApi.create_company ...'
      end
      # resource path
      local_var_path = '/companies'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_company'])

      # return_type
      return_type = opts[:debug_return_type] || 'Company'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['auth_header']

      new_options = opts.merge(
        :operation => :"AdvancedControlsApi.create_company",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvancedControlsApi#create_company\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get company configuration
    # Returns a company's commerce sync configuration'.
    # @param company_id [String] Unique identifier for a company.
    # @param [Hash] opts the optional parameters
    # @return [Configuration]
    def get_configuration(company_id, opts = {})
      data, _status_code, _headers = get_configuration_with_http_info(company_id, opts)
      data
    end

    # Get company configuration
    # Returns a company&#39;s commerce sync configuration&#39;.
    # @param company_id [String] Unique identifier for a company.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Configuration, Integer, Hash)>] Configuration data, response status code and response headers
    def get_configuration_with_http_info(company_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvancedControlsApi.get_configuration ...'
      end
      # verify the required parameter 'company_id' is set
      if @api_client.config.client_side_validation && company_id.nil?
        fail ArgumentError, "Missing the required parameter 'company_id' when calling AdvancedControlsApi.get_configuration"
      end
      # resource path
      local_var_path = '/config/companies/{companyId}/sync/commerce'.sub('{' + 'companyId' + '}', CGI.escape(company_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Configuration'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['auth_header']

      new_options = opts.merge(
        :operation => :"AdvancedControlsApi.get_configuration",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvancedControlsApi#get_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List companies
    # Returns a list of companies.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number. [Read more](https://docs.codat.io/using-the-api/paging). (default to 1)
    # @option opts [Integer] :page_size Number of records to return in a page. [Read more](https://docs.codat.io/using-the-api/paging). (default to 100)
    # @option opts [String] :query Codat query string. [Read more](https://docs.codat.io/using-the-api/querying).
    # @option opts [String] :order_by Field to order results by. [Read more](https://docs.codat.io/using-the-api/ordering-results).
    # @return [Companies]
    def list_companies(opts = {})
      data, _status_code, _headers = list_companies_with_http_info(opts)
      data
    end

    # List companies
    # Returns a list of companies.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number. [Read more](https://docs.codat.io/using-the-api/paging). (default to 1)
    # @option opts [Integer] :page_size Number of records to return in a page. [Read more](https://docs.codat.io/using-the-api/paging). (default to 100)
    # @option opts [String] :query Codat query string. [Read more](https://docs.codat.io/using-the-api/querying).
    # @option opts [String] :order_by Field to order results by. [Read more](https://docs.codat.io/using-the-api/ordering-results).
    # @return [Array<(Companies, Integer, Hash)>] Companies data, response status code and response headers
    def list_companies_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvancedControlsApi.list_companies ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling AdvancedControlsApi.list_companies, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 5000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AdvancedControlsApi.list_companies, must be smaller than or equal to 5000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling AdvancedControlsApi.list_companies, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/companies'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'orderBy'] = opts[:'order_by'] if !opts[:'order_by'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Companies'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['auth_header']

      new_options = opts.merge(
        :operation => :"AdvancedControlsApi.list_companies",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvancedControlsApi#list_companies\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set configuration
    # Sets a company's commerce sync configuration.
    # @param company_id [String] Unique identifier for a company.
    # @param [Hash] opts the optional parameters
    # @return [Configuration]
    def set_configuration(company_id, opts = {})
      data, _status_code, _headers = set_configuration_with_http_info(company_id, opts)
      data
    end

    # Set configuration
    # Sets a company&#39;s commerce sync configuration.
    # @param company_id [String] Unique identifier for a company.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Configuration, Integer, Hash)>] Configuration data, response status code and response headers
    def set_configuration_with_http_info(company_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdvancedControlsApi.set_configuration ...'
      end
      # verify the required parameter 'company_id' is set
      if @api_client.config.client_side_validation && company_id.nil?
        fail ArgumentError, "Missing the required parameter 'company_id' when calling AdvancedControlsApi.set_configuration"
      end
      # resource path
      local_var_path = '/config/companies/{companyId}/sync/commerce'.sub('{' + 'companyId' + '}', CGI.escape(company_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Configuration'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['auth_header']

      new_options = opts.merge(
        :operation => :"AdvancedControlsApi.set_configuration",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdvancedControlsApi#set_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
