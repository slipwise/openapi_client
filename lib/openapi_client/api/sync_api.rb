=begin
#Sync for Commerce

#The API for Sync for Commerce.   Sync for Commerce automatically replicates and reconciles sales data from a merchantâ€™s source PoS, Payments, and eCommerce systems into their accounting software. This eliminates manual processing by merchants and transforms their ability to run and grow their business.    [Read More...](https://docs.codat.io/commerce/overview)  Not seeing the endpoints you're expecting? We've [reorganized our products](https://docs.codat.io/updates/230901-new-products), and you may be using a [different version of Sync for Commerce](https://docs.codat.io/sync-for-commerce-v1-api#/).

The version of the OpenAPI document: 1.1
Contact: syncforcommerce@codat.io
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.4.0-SNAPSHOT

=end

require 'cgi'

module OpenapiClient
  class SyncApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Last successful sync
    # Gets the status of the last successful sync
    # @param company_id [String] Unique identifier for a company.
    # @param [Hash] opts the optional parameters
    # @return [CompanySyncStatus]
    def get_last_successful_sync(company_id, opts = {})
      data, _status_code, _headers = get_last_successful_sync_with_http_info(company_id, opts)
      data
    end

    # Last successful sync
    # Gets the status of the last successful sync
    # @param company_id [String] Unique identifier for a company.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CompanySyncStatus, Integer, Hash)>] CompanySyncStatus data, response status code and response headers
    def get_last_successful_sync_with_http_info(company_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SyncApi.get_last_successful_sync ...'
      end
      # verify the required parameter 'company_id' is set
      if @api_client.config.client_side_validation && company_id.nil?
        fail ArgumentError, "Missing the required parameter 'company_id' when calling SyncApi.get_last_successful_sync"
      end
      # resource path
      local_var_path = '/companies/{companyId}/sync/commerce/syncs/lastSuccessful/status'.sub('{' + 'companyId' + '}', CGI.escape(company_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CompanySyncStatus'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['auth_header']

      new_options = opts.merge(
        :operation => :"SyncApi.get_last_successful_sync",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SyncApi#get_last_successful_sync\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Latest sync status
    # Gets the latest sync status
    # @param company_id [String] Unique identifier for a company.
    # @param [Hash] opts the optional parameters
    # @return [CompanySyncStatus]
    def get_latest_sync(company_id, opts = {})
      data, _status_code, _headers = get_latest_sync_with_http_info(company_id, opts)
      data
    end

    # Latest sync status
    # Gets the latest sync status
    # @param company_id [String] Unique identifier for a company.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CompanySyncStatus, Integer, Hash)>] CompanySyncStatus data, response status code and response headers
    def get_latest_sync_with_http_info(company_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SyncApi.get_latest_sync ...'
      end
      # verify the required parameter 'company_id' is set
      if @api_client.config.client_side_validation && company_id.nil?
        fail ArgumentError, "Missing the required parameter 'company_id' when calling SyncApi.get_latest_sync"
      end
      # resource path
      local_var_path = '/companies/{companyId}/sync/commerce/syncs/latest/status'.sub('{' + 'companyId' + '}', CGI.escape(company_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CompanySyncStatus'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['auth_header']

      new_options = opts.merge(
        :operation => :"SyncApi.get_latest_sync",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SyncApi#get_latest_sync\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get sync status
    # Get the sync status for a specified sync
    # @param company_id [String] Unique identifier for a company.
    # @param sync_id [String] Unique identifier for a sync.
    # @param [Hash] opts the optional parameters
    # @return [CompanySyncStatus]
    def get_sync_by_id(company_id, sync_id, opts = {})
      data, _status_code, _headers = get_sync_by_id_with_http_info(company_id, sync_id, opts)
      data
    end

    # Get sync status
    # Get the sync status for a specified sync
    # @param company_id [String] Unique identifier for a company.
    # @param sync_id [String] Unique identifier for a sync.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CompanySyncStatus, Integer, Hash)>] CompanySyncStatus data, response status code and response headers
    def get_sync_by_id_with_http_info(company_id, sync_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SyncApi.get_sync_by_id ...'
      end
      # verify the required parameter 'company_id' is set
      if @api_client.config.client_side_validation && company_id.nil?
        fail ArgumentError, "Missing the required parameter 'company_id' when calling SyncApi.get_sync_by_id"
      end
      # verify the required parameter 'sync_id' is set
      if @api_client.config.client_side_validation && sync_id.nil?
        fail ArgumentError, "Missing the required parameter 'sync_id' when calling SyncApi.get_sync_by_id"
      end
      # resource path
      local_var_path = '/companies/{companyId}/sync/commerce/syncs/{syncId}/status'.sub('{' + 'companyId' + '}', CGI.escape(company_id.to_s)).sub('{' + 'syncId' + '}', CGI.escape(sync_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CompanySyncStatus'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['auth_header']

      new_options = opts.merge(
        :operation => :"SyncApi.get_sync_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SyncApi#get_sync_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get sync status
    # Gets a list of sync statuses.
    # @param company_id [String] Unique identifier for a company.
    # @param [Hash] opts the optional parameters
    # @return [SyncStatus]
    def get_sync_status(company_id, opts = {})
      data, _status_code, _headers = get_sync_status_with_http_info(company_id, opts)
      data
    end

    # Get sync status
    # Gets a list of sync statuses.
    # @param company_id [String] Unique identifier for a company.
    # @param [Hash] opts the optional parameters
    # @return [Array<(SyncStatus, Integer, Hash)>] SyncStatus data, response status code and response headers
    def get_sync_status_with_http_info(company_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SyncApi.get_sync_status ...'
      end
      # verify the required parameter 'company_id' is set
      if @api_client.config.client_side_validation && company_id.nil?
        fail ArgumentError, "Missing the required parameter 'company_id' when calling SyncApi.get_sync_status"
      end
      # resource path
      local_var_path = '/meta/companies/{companyId}/sync/commerce/status'.sub('{' + 'companyId' + '}', CGI.escape(company_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SyncStatus'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['auth_header']

      new_options = opts.merge(
        :operation => :"SyncApi.get_sync_status",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SyncApi#get_sync_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List sync statuses
    # Gets a list of sync statuses
    # @param company_id [String] Unique identifier for a company.
    # @param [Hash] opts the optional parameters
    # @return [Array<CompanySyncStatus>]
    def list_syncs(company_id, opts = {})
      data, _status_code, _headers = list_syncs_with_http_info(company_id, opts)
      data
    end

    # List sync statuses
    # Gets a list of sync statuses
    # @param company_id [String] Unique identifier for a company.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<CompanySyncStatus>, Integer, Hash)>] Array<CompanySyncStatus> data, response status code and response headers
    def list_syncs_with_http_info(company_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SyncApi.list_syncs ...'
      end
      # verify the required parameter 'company_id' is set
      if @api_client.config.client_side_validation && company_id.nil?
        fail ArgumentError, "Missing the required parameter 'company_id' when calling SyncApi.list_syncs"
      end
      # resource path
      local_var_path = '/companies/{companyId}/sync/commerce/syncs/list/status'.sub('{' + 'companyId' + '}', CGI.escape(company_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<CompanySyncStatus>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['auth_header']

      new_options = opts.merge(
        :operation => :"SyncApi.list_syncs",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SyncApi#list_syncs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Initiate new sync
    # Run a Commerce sync from the last successful sync up to the date provided (optional), otherwise UtcNow is used.\\r\\nIf there was no previously successful sync, the start date in the config is used.
    # @param company_id [String] Unique identifier for a company.
    # @param [Hash] opts the optional parameters
    # @option opts [SyncToLatestArgs] :sync_to_latest_args 
    # @return [SyncSummary]
    def request_sync(company_id, opts = {})
      data, _status_code, _headers = request_sync_with_http_info(company_id, opts)
      data
    end

    # Initiate new sync
    # Run a Commerce sync from the last successful sync up to the date provided (optional), otherwise UtcNow is used.\\r\\nIf there was no previously successful sync, the start date in the config is used.
    # @param company_id [String] Unique identifier for a company.
    # @param [Hash] opts the optional parameters
    # @option opts [SyncToLatestArgs] :sync_to_latest_args 
    # @return [Array<(SyncSummary, Integer, Hash)>] SyncSummary data, response status code and response headers
    def request_sync_with_http_info(company_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SyncApi.request_sync ...'
      end
      # verify the required parameter 'company_id' is set
      if @api_client.config.client_side_validation && company_id.nil?
        fail ArgumentError, "Missing the required parameter 'company_id' when calling SyncApi.request_sync"
      end
      # resource path
      local_var_path = '/companies/{companyId}/sync/commerce/latest'.sub('{' + 'companyId' + '}', CGI.escape(company_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'sync_to_latest_args'])

      # return_type
      return_type = opts[:debug_return_type] || 'SyncSummary'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['auth_header']

      new_options = opts.merge(
        :operation => :"SyncApi.request_sync",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SyncApi#request_sync\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Initiate sync for specific range
    # Initiate a sync for the specified start date to the specified finish date in the request payload.
    # @param company_id [String] Unique identifier for a company.
    # @param [Hash] opts the optional parameters
    # @option opts [SyncRange] :sync_range 
    # @return [SyncSummary]
    def request_sync_for_date_range(company_id, opts = {})
      data, _status_code, _headers = request_sync_for_date_range_with_http_info(company_id, opts)
      data
    end

    # Initiate sync for specific range
    # Initiate a sync for the specified start date to the specified finish date in the request payload.
    # @param company_id [String] Unique identifier for a company.
    # @param [Hash] opts the optional parameters
    # @option opts [SyncRange] :sync_range 
    # @return [Array<(SyncSummary, Integer, Hash)>] SyncSummary data, response status code and response headers
    def request_sync_for_date_range_with_http_info(company_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SyncApi.request_sync_for_date_range ...'
      end
      # verify the required parameter 'company_id' is set
      if @api_client.config.client_side_validation && company_id.nil?
        fail ArgumentError, "Missing the required parameter 'company_id' when calling SyncApi.request_sync_for_date_range"
      end
      # resource path
      local_var_path = '/meta/companies/{companyId}/sync/commerce/historic'.sub('{' + 'companyId' + '}', CGI.escape(company_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'sync_range'])

      # return_type
      return_type = opts[:debug_return_type] || 'SyncSummary'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['auth_header']

      new_options = opts.merge(
        :operation => :"SyncApi.request_sync_for_date_range",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SyncApi#request_sync_for_date_range\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
