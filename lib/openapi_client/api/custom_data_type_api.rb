=begin
#Platform API

#An API for the common components of all of Codat's products.  These end points cover creating and managing your companies, data connections, and integrations.  [Read about the building blocks of Codat...](https://docs.codat.io/core-concepts/companies)  [See our OpenAPI spec](https://github.com/codatio/oas) 

The version of the OpenAPI document: 3.0.0
Contact: support@codat.io
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.4.0-SNAPSHOT

=end

require 'cgi'

module OpenapiClient
  class CustomDataTypeApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Configure custom data type
    # The *Configure custom data type* endpoint allows you to maintain or change the configuration required to return a custom data type for a specific integration.   A [custom data type](https://docs.codat.io/using-the-api/custom-data) is an additional data type you can create that is not included in Codat's standardized data model.  ### Tips and traps  - You can only configure a single custom data type for a single platform at a time. Use the endpoint multiple times if you need to configure it for multiple platforms.   - You can only indicate a single data source for each customer data type.   - Make your custom configuration as similar as possible to our standard data types so you can interact with them in exactly the same way.
    # @param platform_key [String] A unique 4-letter key to represent a platform in each integration. View [accounting](https://docs.codat.io/integrations/accounting/overview#platform-keys), [banking](https://docs.codat.io/integrations/banking/overview#platform-keys), and [commerce](https://docs.codat.io/integrations/commerce/overview#platform-keys) platform keys.
    # @param custom_data_identifier [String] Unique identifier for a custom data type.
    # @param [Hash] opts the optional parameters
    # @option opts [CustomDataTypeConfiguration] :custom_data_type_configuration Custom data type configuration for the specified platform.
    # @return [CustomDataTypeConfiguration]
    def configure_custom_data_type(platform_key, custom_data_identifier, opts = {})
      data, _status_code, _headers = configure_custom_data_type_with_http_info(platform_key, custom_data_identifier, opts)
      data
    end

    # Configure custom data type
    # The *Configure custom data type* endpoint allows you to maintain or change the configuration required to return a custom data type for a specific integration.   A [custom data type](https://docs.codat.io/using-the-api/custom-data) is an additional data type you can create that is not included in Codat&#39;s standardized data model.  ### Tips and traps  - You can only configure a single custom data type for a single platform at a time. Use the endpoint multiple times if you need to configure it for multiple platforms.   - You can only indicate a single data source for each customer data type.   - Make your custom configuration as similar as possible to our standard data types so you can interact with them in exactly the same way.
    # @param platform_key [String] A unique 4-letter key to represent a platform in each integration. View [accounting](https://docs.codat.io/integrations/accounting/overview#platform-keys), [banking](https://docs.codat.io/integrations/banking/overview#platform-keys), and [commerce](https://docs.codat.io/integrations/commerce/overview#platform-keys) platform keys.
    # @param custom_data_identifier [String] Unique identifier for a custom data type.
    # @param [Hash] opts the optional parameters
    # @option opts [CustomDataTypeConfiguration] :custom_data_type_configuration Custom data type configuration for the specified platform.
    # @return [Array<(CustomDataTypeConfiguration, Integer, Hash)>] CustomDataTypeConfiguration data, response status code and response headers
    def configure_custom_data_type_with_http_info(platform_key, custom_data_identifier, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomDataTypeApi.configure_custom_data_type ...'
      end
      # verify the required parameter 'platform_key' is set
      if @api_client.config.client_side_validation && platform_key.nil?
        fail ArgumentError, "Missing the required parameter 'platform_key' when calling CustomDataTypeApi.configure_custom_data_type"
      end
      if @api_client.config.client_side_validation && platform_key.to_s.length > 4
        fail ArgumentError, 'invalid value for "platform_key" when calling CustomDataTypeApi.configure_custom_data_type, the character length must be smaller than or equal to 4.'
      end

      if @api_client.config.client_side_validation && platform_key.to_s.length < 4
        fail ArgumentError, 'invalid value for "platform_key" when calling CustomDataTypeApi.configure_custom_data_type, the character length must be great than or equal to 4.'
      end

      pattern = Regexp.new(/[a-z]{4}/)
      if @api_client.config.client_side_validation && platform_key !~ pattern
        fail ArgumentError, "invalid value for 'platform_key' when calling CustomDataTypeApi.configure_custom_data_type, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'custom_data_identifier' is set
      if @api_client.config.client_side_validation && custom_data_identifier.nil?
        fail ArgumentError, "Missing the required parameter 'custom_data_identifier' when calling CustomDataTypeApi.configure_custom_data_type"
      end
      # resource path
      local_var_path = '/integrations/{platformKey}/dataTypes/custom/{customDataIdentifier}'.sub('{' + 'platformKey' + '}', CGI.escape(platform_key.to_s)).sub('{' + 'customDataIdentifier' + '}', CGI.escape(custom_data_identifier.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'custom_data_type_configuration'])

      # return_type
      return_type = opts[:debug_return_type] || 'CustomDataTypeConfiguration'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['auth_header']

      new_options = opts.merge(
        :operation => :"CustomDataTypeApi.configure_custom_data_type",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomDataTypeApi#configure_custom_data_type\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get custom data configuration
    # The *Get custom data configuration* endpoint returns existing configuration details for the specified custom data type and integration pair you previously configured.  A [custom data type](https://docs.codat.io/using-the-api/custom-data) is an additional data type you can create that is not included in Codat's standardized data model.
    # @param platform_key [String] A unique 4-letter key to represent a platform in each integration. View [accounting](https://docs.codat.io/integrations/accounting/overview#platform-keys), [banking](https://docs.codat.io/integrations/banking/overview#platform-keys), and [commerce](https://docs.codat.io/integrations/commerce/overview#platform-keys) platform keys.
    # @param custom_data_identifier [String] Unique identifier for a custom data type.
    # @param [Hash] opts the optional parameters
    # @return [CustomDataTypeRecords]
    def get_custom_data_type_configuration(platform_key, custom_data_identifier, opts = {})
      data, _status_code, _headers = get_custom_data_type_configuration_with_http_info(platform_key, custom_data_identifier, opts)
      data
    end

    # Get custom data configuration
    # The *Get custom data configuration* endpoint returns existing configuration details for the specified custom data type and integration pair you previously configured.  A [custom data type](https://docs.codat.io/using-the-api/custom-data) is an additional data type you can create that is not included in Codat&#39;s standardized data model.
    # @param platform_key [String] A unique 4-letter key to represent a platform in each integration. View [accounting](https://docs.codat.io/integrations/accounting/overview#platform-keys), [banking](https://docs.codat.io/integrations/banking/overview#platform-keys), and [commerce](https://docs.codat.io/integrations/commerce/overview#platform-keys) platform keys.
    # @param custom_data_identifier [String] Unique identifier for a custom data type.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CustomDataTypeRecords, Integer, Hash)>] CustomDataTypeRecords data, response status code and response headers
    def get_custom_data_type_configuration_with_http_info(platform_key, custom_data_identifier, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomDataTypeApi.get_custom_data_type_configuration ...'
      end
      # verify the required parameter 'platform_key' is set
      if @api_client.config.client_side_validation && platform_key.nil?
        fail ArgumentError, "Missing the required parameter 'platform_key' when calling CustomDataTypeApi.get_custom_data_type_configuration"
      end
      if @api_client.config.client_side_validation && platform_key.to_s.length > 4
        fail ArgumentError, 'invalid value for "platform_key" when calling CustomDataTypeApi.get_custom_data_type_configuration, the character length must be smaller than or equal to 4.'
      end

      if @api_client.config.client_side_validation && platform_key.to_s.length < 4
        fail ArgumentError, 'invalid value for "platform_key" when calling CustomDataTypeApi.get_custom_data_type_configuration, the character length must be great than or equal to 4.'
      end

      pattern = Regexp.new(/[a-z]{4}/)
      if @api_client.config.client_side_validation && platform_key !~ pattern
        fail ArgumentError, "invalid value for 'platform_key' when calling CustomDataTypeApi.get_custom_data_type_configuration, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'custom_data_identifier' is set
      if @api_client.config.client_side_validation && custom_data_identifier.nil?
        fail ArgumentError, "Missing the required parameter 'custom_data_identifier' when calling CustomDataTypeApi.get_custom_data_type_configuration"
      end
      # resource path
      local_var_path = '/integrations/{platformKey}/dataTypes/custom/{customDataIdentifier}'.sub('{' + 'platformKey' + '}', CGI.escape(platform_key.to_s)).sub('{' + 'customDataIdentifier' + '}', CGI.escape(custom_data_identifier.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CustomDataTypeRecords'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['auth_header']

      new_options = opts.merge(
        :operation => :"CustomDataTypeApi.get_custom_data_type_configuration",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomDataTypeApi#get_custom_data_type_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List custom data type records
    # The *List custom data type records* endpoint returns a paginated list of records pulled for the specified custom data type you previously configured.  A [custom data type](https://docs.codat.io/using-the-api/custom-data) is an additional data type you can create that is not included in Codat's standardized data model.s endpoint returns a paginated list of records whose schema is defined [Configure custom data type](https://docs.codat.io/platform-api#/operations/configure-custom-data-type)
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number. [Read more](https://docs.codat.io/using-the-api/paging). (default to 1)
    # @option opts [Integer] :page_size Number of records to return in a page. [Read more](https://docs.codat.io/using-the-api/paging). (default to 100)
    # @return [CustomDataTypeRecords]
    def list_custom_data_type_records(opts = {})
      data, _status_code, _headers = list_custom_data_type_records_with_http_info(opts)
      data
    end

    # List custom data type records
    # The *List custom data type records* endpoint returns a paginated list of records pulled for the specified custom data type you previously configured.  A [custom data type](https://docs.codat.io/using-the-api/custom-data) is an additional data type you can create that is not included in Codat&#39;s standardized data model.s endpoint returns a paginated list of records whose schema is defined [Configure custom data type](https://docs.codat.io/platform-api#/operations/configure-custom-data-type)
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number. [Read more](https://docs.codat.io/using-the-api/paging). (default to 1)
    # @option opts [Integer] :page_size Number of records to return in a page. [Read more](https://docs.codat.io/using-the-api/paging). (default to 100)
    # @return [Array<(CustomDataTypeRecords, Integer, Hash)>] CustomDataTypeRecords data, response status code and response headers
    def list_custom_data_type_records_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomDataTypeApi.list_custom_data_type_records ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling CustomDataTypeApi.list_custom_data_type_records, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 5000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling CustomDataTypeApi.list_custom_data_type_records, must be smaller than or equal to 5000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling CustomDataTypeApi.list_custom_data_type_records, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/companies/{companyId}/connections/{connectionId}/data/custom/{customDataIdentifier}'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CustomDataTypeRecords'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['auth_header']

      new_options = opts.merge(
        :operation => :"CustomDataTypeApi.list_custom_data_type_records",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomDataTypeApi#list_custom_data_type_records\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Refresh custom data type
    # The *Refresh custom data type* endpoint refreshes the specified custom data type for a given company. This is an asynchronous operation that will sync updated data from the linked integration into Codat for you to view.
    # @param company_id [String] Unique identifier for a company.
    # @param connection_id [String] Unique identifier for a connection.
    # @param custom_data_identifier [String] Unique identifier for a custom data type.
    # @param [Hash] opts the optional parameters
    # @return [PullOperation]
    def refresh_custom_data_type(company_id, connection_id, custom_data_identifier, opts = {})
      data, _status_code, _headers = refresh_custom_data_type_with_http_info(company_id, connection_id, custom_data_identifier, opts)
      data
    end

    # Refresh custom data type
    # The *Refresh custom data type* endpoint refreshes the specified custom data type for a given company. This is an asynchronous operation that will sync updated data from the linked integration into Codat for you to view.
    # @param company_id [String] Unique identifier for a company.
    # @param connection_id [String] Unique identifier for a connection.
    # @param custom_data_identifier [String] Unique identifier for a custom data type.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PullOperation, Integer, Hash)>] PullOperation data, response status code and response headers
    def refresh_custom_data_type_with_http_info(company_id, connection_id, custom_data_identifier, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomDataTypeApi.refresh_custom_data_type ...'
      end
      # verify the required parameter 'company_id' is set
      if @api_client.config.client_side_validation && company_id.nil?
        fail ArgumentError, "Missing the required parameter 'company_id' when calling CustomDataTypeApi.refresh_custom_data_type"
      end
      # verify the required parameter 'connection_id' is set
      if @api_client.config.client_side_validation && connection_id.nil?
        fail ArgumentError, "Missing the required parameter 'connection_id' when calling CustomDataTypeApi.refresh_custom_data_type"
      end
      # verify the required parameter 'custom_data_identifier' is set
      if @api_client.config.client_side_validation && custom_data_identifier.nil?
        fail ArgumentError, "Missing the required parameter 'custom_data_identifier' when calling CustomDataTypeApi.refresh_custom_data_type"
      end
      # resource path
      local_var_path = '/companies/{companyId}/connections/{connectionId}/data/queue/custom/{customDataIdentifier}'.sub('{' + 'companyId' + '}', CGI.escape(company_id.to_s)).sub('{' + 'connectionId' + '}', CGI.escape(connection_id.to_s)).sub('{' + 'customDataIdentifier' + '}', CGI.escape(custom_data_identifier.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PullOperation'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['auth_header']

      new_options = opts.merge(
        :operation => :"CustomDataTypeApi.refresh_custom_data_type",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomDataTypeApi#refresh_custom_data_type\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
