=begin
#Sync for Commerce

#The API for Sync for Commerce.   Sync for Commerce automatically replicates and reconciles sales data from a merchantâ€™s source PoS, Payments, and eCommerce systems into their accounting software. This eliminates manual processing by merchants and transforms their ability to run and grow their business.    [Read More...](https://docs.codat.io/commerce/overview)  Not seeing the endpoints you're expecting? We've [reorganized our products](https://docs.codat.io/updates/230901-new-products), and you may be using a [different version of Sync for Commerce](https://docs.codat.io/sync-for-commerce-v1-api#/).

The version of the OpenAPI document: 1.1
Contact: syncforcommerce@codat.io
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.4.0-SNAPSHOT

=end

require 'cgi'

module OpenapiClient
  class SyncFlowSettingsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get preferences for text fields
    # Return preferences set for the text fields on sync flow.
    # @param locale [String] Localization identifier for English (US) or French.
    # @param [Hash] opts the optional parameters
    # @return [Hash<String, Localization>]
    def get_config_text_sync_flow(locale, opts = {})
      data, _status_code, _headers = get_config_text_sync_flow_with_http_info(locale, opts)
      data
    end

    # Get preferences for text fields
    # Return preferences set for the text fields on sync flow.
    # @param locale [String] Localization identifier for English (US) or French.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Hash<String, Localization>, Integer, Hash)>] Hash<String, Localization> data, response status code and response headers
    def get_config_text_sync_flow_with_http_info(locale, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SyncFlowSettingsApi.get_config_text_sync_flow ...'
      end
      # verify the required parameter 'locale' is set
      if @api_client.config.client_side_validation && locale.nil?
        fail ArgumentError, "Missing the required parameter 'locale' when calling SyncFlowSettingsApi.get_config_text_sync_flow"
      end
      # verify enum value
      allowable_values = ["en-us", "fr-fr"]
      if @api_client.config.client_side_validation && !allowable_values.include?(locale)
        fail ArgumentError, "invalid value for \"locale\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/sync/commerce/config/ui/text'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'locale'] = locale

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Hash<String, Localization>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['auth_header']

      new_options = opts.merge(
        :operation => :"SyncFlowSettingsApi.get_config_text_sync_flow",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SyncFlowSettingsApi#get_config_text_sync_flow\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List visible accounts
    # Return accounts which are visible on sync flow.
    # @param client_id [String] Unique identifier for your client in Codat.
    # @param platform_key [String] A unique 4-letter key to represent a platform in each integration. View [accounting](https://docs.codat.io/integrations/accounting/overview#platform-keys), [banking](https://docs.codat.io/integrations/banking/overview#platform-keys), and [commerce](https://docs.codat.io/integrations/commerce/overview#platform-keys) platform keys.
    # @param [Hash] opts the optional parameters
    # @return [VisibleAccounts]
    def get_visible_accounts(client_id, platform_key, opts = {})
      data, _status_code, _headers = get_visible_accounts_with_http_info(client_id, platform_key, opts)
      data
    end

    # List visible accounts
    # Return accounts which are visible on sync flow.
    # @param client_id [String] Unique identifier for your client in Codat.
    # @param platform_key [String] A unique 4-letter key to represent a platform in each integration. View [accounting](https://docs.codat.io/integrations/accounting/overview#platform-keys), [banking](https://docs.codat.io/integrations/banking/overview#platform-keys), and [commerce](https://docs.codat.io/integrations/commerce/overview#platform-keys) platform keys.
    # @param [Hash] opts the optional parameters
    # @return [Array<(VisibleAccounts, Integer, Hash)>] VisibleAccounts data, response status code and response headers
    def get_visible_accounts_with_http_info(client_id, platform_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SyncFlowSettingsApi.get_visible_accounts ...'
      end
      # verify the required parameter 'client_id' is set
      if @api_client.config.client_side_validation && client_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_id' when calling SyncFlowSettingsApi.get_visible_accounts"
      end
      # verify the required parameter 'platform_key' is set
      if @api_client.config.client_side_validation && platform_key.nil?
        fail ArgumentError, "Missing the required parameter 'platform_key' when calling SyncFlowSettingsApi.get_visible_accounts"
      end
      if @api_client.config.client_side_validation && platform_key.to_s.length > 4
        fail ArgumentError, 'invalid value for "platform_key" when calling SyncFlowSettingsApi.get_visible_accounts, the character length must be smaller than or equal to 4.'
      end

      if @api_client.config.client_side_validation && platform_key.to_s.length < 4
        fail ArgumentError, 'invalid value for "platform_key" when calling SyncFlowSettingsApi.get_visible_accounts, the character length must be great than or equal to 4.'
      end

      pattern = Regexp.new(/[a-z]{4}/)
      if @api_client.config.client_side_validation && platform_key !~ pattern
        fail ArgumentError, "invalid value for 'platform_key' when calling SyncFlowSettingsApi.get_visible_accounts, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/clients/{clientId}/config/ui/accounts/platform/{platformKey}'.sub('{' + 'clientId' + '}', CGI.escape(client_id.to_s)).sub('{' + 'platformKey' + '}', CGI.escape(platform_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'VisibleAccounts'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['auth_header']

      new_options = opts.merge(
        :operation => :"SyncFlowSettingsApi.get_visible_accounts",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SyncFlowSettingsApi#get_visible_accounts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update preferences for text fields
    # Set preferences for the text fields on sync flow.
    # @param locale [String] Localization identifier for English (US) or French.
    # @param [Hash] opts the optional parameters
    # @option opts [Hash<String, Localization>] :request_body 
    # @return [Hash<String, Localization>]
    def update_config_text_sync_flow(locale, opts = {})
      data, _status_code, _headers = update_config_text_sync_flow_with_http_info(locale, opts)
      data
    end

    # Update preferences for text fields
    # Set preferences for the text fields on sync flow.
    # @param locale [String] Localization identifier for English (US) or French.
    # @param [Hash] opts the optional parameters
    # @option opts [Hash<String, Localization>] :request_body 
    # @return [Array<(Hash<String, Localization>, Integer, Hash)>] Hash<String, Localization> data, response status code and response headers
    def update_config_text_sync_flow_with_http_info(locale, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SyncFlowSettingsApi.update_config_text_sync_flow ...'
      end
      # verify the required parameter 'locale' is set
      if @api_client.config.client_side_validation && locale.nil?
        fail ArgumentError, "Missing the required parameter 'locale' when calling SyncFlowSettingsApi.update_config_text_sync_flow"
      end
      # verify enum value
      allowable_values = ["en-us", "fr-fr"]
      if @api_client.config.client_side_validation && !allowable_values.include?(locale)
        fail ArgumentError, "invalid value for \"locale\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/sync/commerce/config/ui/text'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'locale'] = locale

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'request_body'])

      # return_type
      return_type = opts[:debug_return_type] || 'Hash<String, Localization>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['auth_header']

      new_options = opts.merge(
        :operation => :"SyncFlowSettingsApi.update_config_text_sync_flow",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SyncFlowSettingsApi#update_config_text_sync_flow\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update visible accounts
    # Update which accounts are visible on sync flow.
    # @param platform_key [String] A unique 4-letter key to represent a platform in each integration. View [accounting](https://docs.codat.io/integrations/accounting/overview#platform-keys), [banking](https://docs.codat.io/integrations/banking/overview#platform-keys), and [commerce](https://docs.codat.io/integrations/commerce/overview#platform-keys) platform keys.
    # @param [Hash] opts the optional parameters
    # @option opts [VisibleAccounts] :visible_accounts 
    # @return [VisibleAccounts]
    def update_visible_accounts_sync_flow(platform_key, opts = {})
      data, _status_code, _headers = update_visible_accounts_sync_flow_with_http_info(platform_key, opts)
      data
    end

    # Update visible accounts
    # Update which accounts are visible on sync flow.
    # @param platform_key [String] A unique 4-letter key to represent a platform in each integration. View [accounting](https://docs.codat.io/integrations/accounting/overview#platform-keys), [banking](https://docs.codat.io/integrations/banking/overview#platform-keys), and [commerce](https://docs.codat.io/integrations/commerce/overview#platform-keys) platform keys.
    # @param [Hash] opts the optional parameters
    # @option opts [VisibleAccounts] :visible_accounts 
    # @return [Array<(VisibleAccounts, Integer, Hash)>] VisibleAccounts data, response status code and response headers
    def update_visible_accounts_sync_flow_with_http_info(platform_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SyncFlowSettingsApi.update_visible_accounts_sync_flow ...'
      end
      # verify the required parameter 'platform_key' is set
      if @api_client.config.client_side_validation && platform_key.nil?
        fail ArgumentError, "Missing the required parameter 'platform_key' when calling SyncFlowSettingsApi.update_visible_accounts_sync_flow"
      end
      if @api_client.config.client_side_validation && platform_key.to_s.length > 4
        fail ArgumentError, 'invalid value for "platform_key" when calling SyncFlowSettingsApi.update_visible_accounts_sync_flow, the character length must be smaller than or equal to 4.'
      end

      if @api_client.config.client_side_validation && platform_key.to_s.length < 4
        fail ArgumentError, 'invalid value for "platform_key" when calling SyncFlowSettingsApi.update_visible_accounts_sync_flow, the character length must be great than or equal to 4.'
      end

      pattern = Regexp.new(/[a-z]{4}/)
      if @api_client.config.client_side_validation && platform_key !~ pattern
        fail ArgumentError, "invalid value for 'platform_key' when calling SyncFlowSettingsApi.update_visible_accounts_sync_flow, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/sync/commerce/config/ui/accounts/platform/{platformKey}'.sub('{' + 'platformKey' + '}', CGI.escape(platform_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'visible_accounts'])

      # return_type
      return_type = opts[:debug_return_type] || 'VisibleAccounts'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['auth_header']

      new_options = opts.merge(
        :operation => :"SyncFlowSettingsApi.update_visible_accounts_sync_flow",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SyncFlowSettingsApi#update_visible_accounts_sync_flow\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
