=begin
#Platform API

#An API for the common components of all of Codat's products.  These end points cover creating and managing your companies, data connections, and integrations.  [Read about the building blocks of Codat...](https://docs.codat.io/core-concepts/companies)  [See our OpenAPI spec](https://github.com/codatio/oas) 

The version of the OpenAPI document: 3.0.0
Contact: support@codat.io
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.4.0-SNAPSHOT

=end

require 'cgi'

module OpenapiClient
  class RefreshDataApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get data status
    # Get the state of each data type for a company
    # @param company_id [String] Unique identifier for a company.
    # @param [Hash] opts the optional parameters
    # @return [Hash<String, DataStatus>]
    def get_company_data_status(company_id, opts = {})
      data, _status_code, _headers = get_company_data_status_with_http_info(company_id, opts)
      data
    end

    # Get data status
    # Get the state of each data type for a company
    # @param company_id [String] Unique identifier for a company.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Hash<String, DataStatus>, Integer, Hash)>] Hash<String, DataStatus> data, response status code and response headers
    def get_company_data_status_with_http_info(company_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RefreshDataApi.get_company_data_status ...'
      end
      # verify the required parameter 'company_id' is set
      if @api_client.config.client_side_validation && company_id.nil?
        fail ArgumentError, "Missing the required parameter 'company_id' when calling RefreshDataApi.get_company_data_status"
      end
      # resource path
      local_var_path = '/companies/{companyId}/dataStatus'.sub('{' + 'companyId' + '}', CGI.escape(company_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Hash<String, DataStatus>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['auth_header']

      new_options = opts.merge(
        :operation => :"RefreshDataApi.get_company_data_status",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RefreshDataApi#get_company_data_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get pull operation
    # Retrieve information about a single dataset or pull operation.
    # @param company_id [String] Unique identifier for a company.
    # @param dataset_id [String] Unique identifier for the dataset that completed its sync.
    # @param [Hash] opts the optional parameters
    # @return [PullOperation]
    def get_pull_operation(company_id, dataset_id, opts = {})
      data, _status_code, _headers = get_pull_operation_with_http_info(company_id, dataset_id, opts)
      data
    end

    # Get pull operation
    # Retrieve information about a single dataset or pull operation.
    # @param company_id [String] Unique identifier for a company.
    # @param dataset_id [String] Unique identifier for the dataset that completed its sync.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PullOperation, Integer, Hash)>] PullOperation data, response status code and response headers
    def get_pull_operation_with_http_info(company_id, dataset_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RefreshDataApi.get_pull_operation ...'
      end
      # verify the required parameter 'company_id' is set
      if @api_client.config.client_side_validation && company_id.nil?
        fail ArgumentError, "Missing the required parameter 'company_id' when calling RefreshDataApi.get_pull_operation"
      end
      # verify the required parameter 'dataset_id' is set
      if @api_client.config.client_side_validation && dataset_id.nil?
        fail ArgumentError, "Missing the required parameter 'dataset_id' when calling RefreshDataApi.get_pull_operation"
      end
      # resource path
      local_var_path = '/companies/{companyId}/data/history/{datasetId}'.sub('{' + 'companyId' + '}', CGI.escape(company_id.to_s)).sub('{' + 'datasetId' + '}', CGI.escape(dataset_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PullOperation'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['auth_header']

      new_options = opts.merge(
        :operation => :"RefreshDataApi.get_pull_operation",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RefreshDataApi#get_pull_operation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List pull operations
    # Gets the pull operation history (datasets) for a given company.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number. [Read more](https://docs.codat.io/using-the-api/paging). (default to 1)
    # @option opts [Integer] :page_size Number of records to return in a page. [Read more](https://docs.codat.io/using-the-api/paging). (default to 100)
    # @option opts [String] :query Codat query string. [Read more](https://docs.codat.io/using-the-api/querying).
    # @option opts [String] :order_by Field to order results by. [Read more](https://docs.codat.io/using-the-api/ordering-results).
    # @return [PullOperations]
    def list_pull_operations(opts = {})
      data, _status_code, _headers = list_pull_operations_with_http_info(opts)
      data
    end

    # List pull operations
    # Gets the pull operation history (datasets) for a given company.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number. [Read more](https://docs.codat.io/using-the-api/paging). (default to 1)
    # @option opts [Integer] :page_size Number of records to return in a page. [Read more](https://docs.codat.io/using-the-api/paging). (default to 100)
    # @option opts [String] :query Codat query string. [Read more](https://docs.codat.io/using-the-api/querying).
    # @option opts [String] :order_by Field to order results by. [Read more](https://docs.codat.io/using-the-api/ordering-results).
    # @return [Array<(PullOperations, Integer, Hash)>] PullOperations data, response status code and response headers
    def list_pull_operations_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RefreshDataApi.list_pull_operations ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling RefreshDataApi.list_pull_operations, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 5000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RefreshDataApi.list_pull_operations, must be smaller than or equal to 5000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling RefreshDataApi.list_pull_operations, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/companies/{companyId}/data/history'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'orderBy'] = opts[:'order_by'] if !opts[:'order_by'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PullOperations'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['auth_header']

      new_options = opts.merge(
        :operation => :"RefreshDataApi.list_pull_operations",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RefreshDataApi#list_pull_operations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Refresh all data
    # Refreshes all data types with `fetch on first link` set to `true` for a given company.  This is an asynchronous operation, and will bring updated data into Codat from the linked integration for you to view.  [Read more](https://docs.codat.io/core-concepts/data-type-settings) about data type settings and `fetch on first link`.
    # @param company_id [String] Unique identifier for a company.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def refresh_company_data(company_id, opts = {})
      refresh_company_data_with_http_info(company_id, opts)
      nil
    end

    # Refresh all data
    # Refreshes all data types with &#x60;fetch on first link&#x60; set to &#x60;true&#x60; for a given company.  This is an asynchronous operation, and will bring updated data into Codat from the linked integration for you to view.  [Read more](https://docs.codat.io/core-concepts/data-type-settings) about data type settings and &#x60;fetch on first link&#x60;.
    # @param company_id [String] Unique identifier for a company.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def refresh_company_data_with_http_info(company_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RefreshDataApi.refresh_company_data ...'
      end
      # verify the required parameter 'company_id' is set
      if @api_client.config.client_side_validation && company_id.nil?
        fail ArgumentError, "Missing the required parameter 'company_id' when calling RefreshDataApi.refresh_company_data"
      end
      # resource path
      local_var_path = '/companies/{companyId}/data/all'.sub('{' + 'companyId' + '}', CGI.escape(company_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['auth_header']

      new_options = opts.merge(
        :operation => :"RefreshDataApi.refresh_company_data",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RefreshDataApi#refresh_company_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Refresh data type
    # Refreshes a given data type for a given company.  This is an asynchronous operation, and will bring updated data into Codat from the linked integration for you to view.
    # @param company_id [String] Unique identifier for a company.
    # @param data_type [DataType] The key of a Codat data type
    # @param [Hash] opts the optional parameters
    # @option opts [String] :connection_id Optionally, provide a data connection id to only queue pull operations on that connection.
    # @return [PullOperation]
    def refresh_data_type(company_id, data_type, opts = {})
      data, _status_code, _headers = refresh_data_type_with_http_info(company_id, data_type, opts)
      data
    end

    # Refresh data type
    # Refreshes a given data type for a given company.  This is an asynchronous operation, and will bring updated data into Codat from the linked integration for you to view.
    # @param company_id [String] Unique identifier for a company.
    # @param data_type [DataType] The key of a Codat data type
    # @param [Hash] opts the optional parameters
    # @option opts [String] :connection_id Optionally, provide a data connection id to only queue pull operations on that connection.
    # @return [Array<(PullOperation, Integer, Hash)>] PullOperation data, response status code and response headers
    def refresh_data_type_with_http_info(company_id, data_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RefreshDataApi.refresh_data_type ...'
      end
      # verify the required parameter 'company_id' is set
      if @api_client.config.client_side_validation && company_id.nil?
        fail ArgumentError, "Missing the required parameter 'company_id' when calling RefreshDataApi.refresh_data_type"
      end
      # verify the required parameter 'data_type' is set
      if @api_client.config.client_side_validation && data_type.nil?
        fail ArgumentError, "Missing the required parameter 'data_type' when calling RefreshDataApi.refresh_data_type"
      end
      # resource path
      local_var_path = '/companies/{companyId}/data/queue/{dataType}'.sub('{' + 'companyId' + '}', CGI.escape(company_id.to_s)).sub('{' + 'dataType' + '}', CGI.escape(data_type.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'connectionId'] = opts[:'connection_id'] if !opts[:'connection_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PullOperation'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['auth_header']

      new_options = opts.merge(
        :operation => :"RefreshDataApi.refresh_data_type",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RefreshDataApi#refresh_data_type\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
