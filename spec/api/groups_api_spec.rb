=begin
#Platform API

#An API for the common components of all of Codat's products.  These end points cover creating and managing your companies, data connections, and integrations.  [Read about the building blocks of Codat...](https://docs.codat.io/core-concepts/companies)  [See our OpenAPI spec](https://github.com/codatio/oas) 

The version of the OpenAPI document: 3.0.0
Contact: support@codat.io
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.4.0-SNAPSHOT

=end

require 'spec_helper'
require 'json'

# Unit tests for OpenapiClient::GroupsApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'GroupsApi' do
  before do
    # run before each test
    @api_instance = OpenapiClient::GroupsApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of GroupsApi' do
    it 'should create an instance of GroupsApi' do
      expect(@api_instance).to be_instance_of(OpenapiClient::GroupsApi)
    end
  end

  # unit tests for add_company_to_group
  # Add company
  # ﻿Use the *Add company* endpoint to assign a company to a group. A company can belong to multiple groups, but can only be added to one group at a time.  [Groups](https://docs.codat.io/platform-api#/schemas/Group) define a set of companies that are organized based on a chosen characteristic and can be managed in the same way.
  # @param company_id Unique identifier for a company.
  # @param [Hash] opts the optional parameters
  # @option opts [CompanyGroupAssignment] :company_group_assignment 
  # @return [Company]
  describe 'add_company_to_group test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for create_group
  # Create group
  # ﻿Use the *Create group* endpoint to generate a new group that you can assign your companies to.  [Groups](https://docs.codat.io/platform-api#/schemas/Group) define a set of companies that are organized based on a chosen characteristic and can be managed in the same way.  ### Tips and traps  * The maximum length for the group name is 50 characters. * It&#39;s possible to create up to 20 groups per client.
  # @param [Hash] opts the optional parameters
  # @option opts [GroupPrototype] :group_prototype 
  # @return [Group]
  describe 'create_group test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for list_groups
  # List groups
  # Use the *List group* endpoint to return a list of all groups that currently exist for your client.  [Groups](https://docs.codat.io/platform-api#/schemas/Group) define a set of companies that are organized based on a chosen characteristic and can be managed in the same way.
  # @param [Hash] opts the optional parameters
  # @return [Groups]
  describe 'list_groups test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for remove_company_from_group
  # Remove company
  # ﻿Use the *Remove company* endpoint to remove a company from a group.  [Groups](https://docs.codat.io/platform-api#/schemas/Group) define a set of companies that are organized based on a chosen characteristic and can be managed in the same way.
  # @param company_id Unique identifier for a company.
  # @param group_id Unique identifier for the group.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'remove_company_from_group test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

end
