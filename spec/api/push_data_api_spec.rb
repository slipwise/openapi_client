=begin
#Platform API

#An API for the common components of all of Codat's products.  These end points cover creating and managing your companies, data connections, and integrations.  [Read about the building blocks of Codat...](https://docs.codat.io/core-concepts/companies)  [See our OpenAPI spec](https://github.com/codatio/oas) 

The version of the OpenAPI document: 3.0.0
Contact: support@codat.io
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.4.0-SNAPSHOT

=end

require 'spec_helper'
require 'json'

# Unit tests for OpenapiClient::PushDataApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'PushDataApi' do
  before do
    # run before each test
    @api_instance = OpenapiClient::PushDataApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of PushDataApi' do
    it 'should create an instance of PushDataApi' do
      expect(@api_instance).to be_instance_of(OpenapiClient::PushDataApi)
    end
  end

  # unit tests for get_company_push_history
  # List push operations
  # List push operation records.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Page number. [Read more](https://docs.codat.io/using-the-api/paging).
  # @option opts [Integer] :page_size Number of records to return in a page. [Read more](https://docs.codat.io/using-the-api/paging).
  # @option opts [String] :query Codat query string. [Read more](https://docs.codat.io/using-the-api/querying).
  # @option opts [String] :order_by Field to order results by. [Read more](https://docs.codat.io/using-the-api/ordering-results).
  # @return [PushOperations]
  describe 'get_company_push_history test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_create_update_model_options_by_data_type
  # Get push options
  # This is the generic documentation for creation and updating of data. See the equivalent endpoint for a given data type for more specific information.   Before pushing data into accounting software, it is often necessary to collect some details from the user as to how they would like the data to be inserted. This includes names and amounts on transactional entities, but also factors such as categorisation of entities, which is often handled differently between different accounting packages. A good example of this is specifying where on the balance sheet/profit and loss reports the user would like a newly-created nominal account to appear.  Codat tries not to limit users to pushing to a very limited number of standard categories, so we have implemented \&quot;options\&quot; endpoints, which allow us to expose to our clients the fields which are required to be pushed for a specific linked company, and the options which may be selected for each field.   &gt; **Supported Integrations** &gt;  &gt; Check out our [coverage explorer](https://knowledge.codat.io/) for integrations that support push (POST/PUT methods).
  # @param company_id Unique identifier for a company.
  # @param connection_id Unique identifier for a connection.
  # @param data_type The key of a Codat data type
  # @param [Hash] opts the optional parameters
  # @return [PushOption]
  describe 'get_create_update_model_options_by_data_type test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_push_operation
  # Get push operation
  # Retrieve push operation.
  # @param company_id Unique identifier for a company.
  # @param push_operation_key Push operation key.
  # @param [Hash] opts the optional parameters
  # @return [PushOperation]
  describe 'get_push_operation test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

end
